set nocompatible              " be iMproved, required
filetype off                  " required

set shell=/bin/bash

call plug#begin('~/.vim/bundle')
"Themes
Plug 'sjl/badwolf'                 "theme
Plug 'morhetz/gruvbox'             "theme

" Languages
if has('nvim')
Plug 'autozimu/LanguageClient-neovim', {
      \'branch': 'next',
      \'do': 'bash install.sh'
      \ }                                                   " language sever client
Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'} " autocompletion
endif
Plug 'python-mode/python-mode'                              " python language
Plug 'lukerandall/haskellmode-vim'                          " haskell language
Plug 'torrancew/vim-openscad'                               " openscad language
Plug 'rust-lang/rust.vim'                                   " rust language
Plug 'phildawes/racer'                                      " use racer completions TODO
Plug 'plasticboy/vim-markdown'                              " markdown language
Plug 'lambdatoast/elm.vim'                                  " elm language
Plug 'LaTeX-Box-Team/LaTeX-Box'                             " latex language
Plug 'stfl/meson.vim'                                       " meson build system
Plug 'lepture/vim-jinja'                                    " jinja templating
Plug 'vale1410/vim-minizinc'                                " Minizinc
Plug 'pearofducks/ansible-vim'                              " Ansible
Plug 'https://github.com/aklt/plantuml-syntax'              " plantuml

                                              " editing
Plug 'tpope/vim-surround'                     " parens and braces
Plug 'tpope/vim-commentary'                   " comment out lines
Plug 'godlygeek/tabular'                      " alignment 
Plug 'michaeljsmith/vim-indent-object'        " select indent objects
Plug 'townk/vim-autoclose'                    " select indent objects
Plug 'easymotion/vim-easymotion'              " quickly navigate to targeted words

" file navigation
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'          " file navigation
Plug 'airblade/vim-rooter'          " root-directory
Plug 'majutsushi/tagbar'            " display tags

" integrations
Plug 'tpope/vim-fugitive'           " TODO learn how to add patches, configure Gbrowse
Plug 'airblade/vim-gitgutter'       " TODO configure and learn keybindings
Plug 'tpope/vim-unimpaired'         " 
Plug 'tpope/vim-repeat'         " TODO

" autocompletion
Plug 'ludovicchabant/vim-gutentags' " auto ctags
Plug 'tpope/vim-dispatch'           " make asynchronous calls, used by vim-tags

" vimwiki
Plug 'vimwiki/vimwiki'              " vimwiki

call plug#end()            " required
filetype plugin indent on    " required

"colors
set background=dark
set t_Co=256
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_contrast_light = 'medium'
colorscheme gruvbox

"GUI, remove unneeded elements
set guioptions-=T 
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

"general usability
set nocompatible
set modelines=0
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set number
set undofile
set autoread
set tildeop

" set listchars for visualizing whitespace
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:▸\ 

"re-open files at last opened position
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

"minimum split width is 80
set winwidth=80

"wildmenu
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn
set wildignore+=*.jpg,*.bmp,*.png,*.jpeg
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.elf
set wildignore+=*.sw?
set wildignore+=*.pyc

"backups
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set backup
set noswapfile


"leader
let mapleader=","
let maplocalleader="\\"

"fix search, map ,<space> to clear hl
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
" nnoremap <tab> %
" vnoremap <tab> %

"setup tabs
set tabstop=4
set shiftwidth=4
set expandtab
nmap <Right> >>
nmap <Left>  <<
vmap <Right> >gv
vmap <Left>  <gv
nmap <Up> [e
nmap <Down> ]e
vmap <Up> [egv
vmap <Down> ]egv


"set line length
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

"stop hitting F1
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

au FocusLost * :wa

"easier escape
inoremap jj <ESC>

"window splits:
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"NERDtree
nnoremap <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=['.vim$', '\~$', '.*\.pyc$']
"let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

"Fzf
nnoremap <C-p> :Files<cr>
nnoremap <C-b> :Buffers<cr>

"Markdown
let g:vim_markdown_folding_disabled = 1

"Commentary
nnoremap \\\ :Commentary<cr>
vnoremap \\\ :Commentary<cr>

"folds enable syntax folding and unfold all on entry
set foldmethod=syntax
autocmd Syntax * normal zR 

"Tags
let g:ctrlp_tjump_only_silent=1
nnoremap <leader>T :Tags<cr>
set omnifunc=syntaxcomplete#Complete
nnoremap <F4> :TagbarToggle<cr>

"Align
nnoremap <leader>a :Tabularize 
vnoremap <leader>a :Tabularize 

"ripgreg
nnoremap <leader>f :Find<cr>
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
set grepprg=rg\ --vimgrep

"do bit twiddling alignment automagically.  TODO: scope this to just c and cpp
fun! RegAlign() "{{{
  Tabularize /(/l1l0
  Tabularize /<</l1r1
  Tabularize /)/l0
  Tabularize /\/\//l1l0
endfunction "}}}

"rooter

"alignment
command! RegAlign call RegAlign()

"language server
if has('nvim')
let g:LanguageClient_serverCommands = {
      \ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
      \ 'python': ['~/.local/bin/pyls'],
      \}
let g:deoplete#enable_at_startup = 1
set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()
nnoremap <silent> Lh :call LanguageClient#textDocument_hover()<cr>
nnoremap <silent> Lr :call LanguageClient_textDocument_rename()<cr>
nnoremap <silent> LR :call LanguageClient_textDocument_references()<cr>
nnoremap <silent> Ld :call LanguageClient_textDocument_definition()<cr>
nnoremap <silent> Li :call LanguageClient_textDocument_implementation()<cr>
nnoremap <silent> Ls :call LanguageClient_textDocument_documentSymbol()<cr>
nnoremap <silent> La :call LanguageClient_textDocument_codeAction()<cr>
nnoremap <silent> Le :call LanguageClient#explainErrorAtPoint()<cr>
endif

" easymotion
nmap s <Plug>(easymotion-overwin-f2)
let g:EasyMotion_smartcase = 1
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
